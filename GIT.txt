git config --local user.name "Seu_Nome_Aqui"
git config --local user.email "seuemail@exemplo.com"
git init (na pasta do arquivo)
git add <nomedoarquivo> (add o arquivo)
git commit -m "mensagem" (commita o arquivo e add uma mensagem sobre a alteracao) obs: necessario ter usado git add no arquivo
git log (visualiza os logs)
git status (verifica o status)
git show <numero_do_commit>(mostra a alteracao realizada) obs: sem o parametro ele mostra o ultimo ponto na historia
git branch <nome da branch> (cria uma linha do tempo alternativa) obs: para nao estragar o que ja foi feito/ se nao tiver nenhum argumento ele mostra todas linhas do tempo
git branch -D <nome da branch> (deleta a branch)
git checkout <nome da branch> (muda para a linha do tempo alternativa criada)
git merge <nome da branch> (tras as mudancas da linha do tempo alternativa pra principal)

git remote add origin https://github.com/carbo6ufmg/<nomedorepositoriogit>.git (add repositorio remoto)
git remote -v (ver os repositorios remotos)
git branch -M main (muda a master pra main(eu acho))
git push -u origin main (para o primeiro push Ã© necessario criar a branch master no rep online)
git add . (pontinho add tudo pra ser alterado)
git push (envia alteracoes locais para o repositorio remoto)

git clone <linkdorep> (copia o repositorio pra pasta local)
git checkout -b <nome da branch> (comando mais rapido pra criar branch e ja ir pra ela)
git commit -am "mensagem" (com esse -a ele ja atualiza como se fosse um git add e ja commita)

git pull (puxa atualizacoes da nuvem)
git checkout <numero do commit obtido git log> -- <nome do arquivo a recuperar> (tras de volta o arquivo daquela linha do tempo)
git checkout -- <nomedoarquivodeletado> (recupera o arquivo deletado nessa linha do tempo)+

git reset --hard